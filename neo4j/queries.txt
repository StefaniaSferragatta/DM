Query 1: 
// Return all gene names together with the number of drugs associated
MATCH (g)-[:alteration]->(d)
RETURN g.name, count(distinct d) as num_drugs

// Return all gene names together with the number of sample in which are overexpressed
MATCH (g)-[:is_overexpressed]->(s)
RETURN g.name, count(distinct s) as num_samples

Query 2:  
// Return the gene name given the name of a drug
MATCH (g:Gene)-[:alteration]->(d:Drug)
WHERE d.name STARTS WITH "P" OR d.name CONTAINS "nib"
RETURN distinct g.name;

// PATH given a drug name
MATCH path = ((d)<-[:alteration]-(g:Gene)-[:is_overexpressed]->(s))
WHERE d.name = 'Dabrafenib'
RETURN path, g.name;


Query 3: 
// Return the top 5 genes per number of drugs associated 
MATCH (g)-[:alteration]->(d)
WITH COUNT(*) AS num_drug, g
RETURN g.name, num_drug
ORDER BY num_drug DESC
LIMIT 5

Query 4:  
// Given a drug name, return the sample treated with it
MATCH (node1:Gene)-[:is_overexpressed]->(node2:Sample)
WHERE EXISTS { ((node1)-[:alteration]->(:Drug {name: 'Ponatinib'})) }
RETURN node2.name as sample_id;

Query 5: 
// Given a sample, visualize the drugs associated to the oncogene genes
MATCH (node2 {name: 'TCGA-B5-A5OE-01A-11R-A31O-07'})<-[:is_overexpressed]-(node1 {is_oncogene: '1'})-[:alteration]->(node3)
RETURN node1,node2,node3


Query 6:  
// Find tumor suppressor genes that are overexpressed in at least 5 types of cancer
MATCH (g:Gene {is_tumor_suppressor: '1'})-[:is_overexpressed]->(node2) 
WITH COUNT(DISTINCT node2.cancer) as num_cancer, g
WHERE num_cancer > 5
RETURN DISTINCT (g.name) as gene_id, num_cancer


Query 7: 
// Given a sample ID, return a list of overexpressed gene and possible type of alterations
CALL {
    MATCH (node1:Gene)-[r:alteration]->(node2:Drug)
    RETURN node1

    UNION

    MATCH (node1:Gene)-[:is_overexpressed]->(node2:Sample {name: 'TCGA-B5-A5OE-01A-11R-A31O-07'})
    RETURN node1
}
WITH node1,[(node1)-[r: alteration]->(node2) |  r.name] AS alterations_name
UNWIND alterations_name as alt_name
RETURN node1.name as gene_id, collect(distinct alt_name)


Query 8:  
// Find the sample which has the greatest number of associated drugs and its list
MATCH (b)<-[:is_overexpressed]-(a)-[:alteration]->(c)
RETURN b.name as sample_id, COLLECT(distinct c.name) as drugs
ORDER BY SIZE(drugs) DESC LIMIT 1

Query 9: 
// Visualize the sample and the related gene that is oncogene and whose alteration is 'Oncogenic Mutations'
CALL {
MATCH (g)-[:alteration {name : 'Oncogenic Mutations'}]->(:Drug)
RETURN g
}
WITH g, (g {is_oncogene:'1'})-[:is_overexpressed]->(:Sample) as list_sample
UNWIND list_sample as sample
RETURN distinct sample

Query 10: 
// Add a relationship between the samples and the drugs given the cancer type and the gene
MATCH (d:Drug)--(g:Gene)--(s:Sample)
WHERE s.cancer = 'CHOL' AND g.name = 'ALK'
MERGE (s)-[r:treated_with]->(d)
